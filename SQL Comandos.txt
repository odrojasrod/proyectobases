
CREATE TABLE Direccion (
    id_direccion SERIAL PRIMARY KEY,
    calle VARCHAR(50),
    ciudad VARCHAR(50),
    estado VARCHAR(50),
    pais VARCHAR(50)
);

CREATE TABLE Usuario (
     
    nombre VARCHAR(50),
    apellidos VARCHAR(50),
    id_direccion INT,
    CONSTRAINT fk_direccion FOREIGN KEY (id_direccion) REFERENCES Direccion(id_direccion)
);


CREATE TABLE Taxon (
    taxon_id SERIAL PRIMARY KEY
    nombre VARCHAR(100)
);


CREATE TABLE Licencia (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL
);

CREATE TABLE Image (
    id SERIAL PRIMARY KEY,
	correo_usuario VARCHAR(100),
	fecha DATE,
	url VARCHAR(250),
	id_licencia NUMBER,
	foreign key (correo) references Usuario(correo),
	foreign key (id_licencia) references Licencia(id)
);

CREATE TABLE Observation (
    observation_id SERIAL PRIMARY KEY,
    latitud DECIMAL(9,6),
    longitud DECIMAL(9,6),
    fecha DATE,
    taxon_id INT,
    url_imagen VARCHAR(255),
    comentario TEXT,
    CONSTRAINT fk_taxon_observation FOREIGN KEY (taxon_id) REFERENCES Taxon(taxon_id)
);


CREATE TABLE Identification (
    correo NUMBER,
	id_observacion NUMBER,
	calificacion NUMBER,
	foreign key (correo) references Usuario(correo),
	foreign key (id_observaciones) references Observation(observation_id)
)

Insert into Licencia(nombre) values ('CC0'), 
('CC BY'), 
('CC BY-SA'), 
('CC BY-ND'), 
('CC BY-NC'), 
('CC BY-NC-SA'), 
('CC BY-NC-ND'), 
('GPL'), 
('LGPL'), 
('MIT'), 
('Apache'), 
('BSD'), 
('Proprietary'), 
('Royalty-Free'), 
('Public Domain')

CREATE OR REPLACE PROCEDURE insertar_usuarios(
  nombre TEXT,
  correo1 TEXT,
  apellidos TEXT, 
  calle1 TEXT,
  estado1 TEXT,
  pais1 TEXT,
  ciudad1 TEXT
)
language plpgsql
as $$
declare
  correo_check TEXT;
  id_direccion INT;
begin
  SELECT U.correo INTO correo_check FROM Usuario U WHERE U.correo = correo1;
  
  if correo_check is null then
    SELECT D.id INTO id_direccion FROM Direccion D WHERE D.calle = calle1 and D.pais = pais1 and D.estado = estado1;
    
    if id_direccion is null then
      INSERT INTO Direccion (calle, ciudad, estado, pais) VALUES (calle1, ciudad1, estado1, pais1) returning id INTO id_direccion;
    end if;
    
    INSERT INTO Usuario(correo, nombre, apellidos, id_direccion) VALUES (correo1, nombre, apellidos, id_direccion);
  else
    RAISE NOTICE 'Usuario ya existe: %', correo_check; 
  end if;
end;
$$;


CREATE OR REPLACE PROCEDURE insertar_observacion(
    p_correo_usuario VARCHAR,
    p_nombre_comun VARCHAR,
    p_nombre_cientifico VARCHAR,
    p_url_imagen VARCHAR,
    p_tipo_taxon VARCHAR,
    p_calle VARCHAR,
    p_ciudad VARCHAR,
    p_estado VARCHAR,
    p_pais VARCHAR,
    p_fecha DATE,
    p_id_licencia INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_id_imagen INTEGER;
    v_id_direccion INTEGER;
    v_id_taxon INTEGER;
BEGIN
    -- Verificar si el usuario ya existe
    IF NOT EXISTS (SELECT 1 FROM Usuario WHERE correo = p_correo_usuario) THEN
        INSERT INTO Usuario (correo) VALUES (p_correo_usuario);
    END IF;

    -- Verificar si la imagen ya existe
    SELECT id_imagen INTO v_id_imagen
    FROM Imagen
    WHERE url = p_url_imagen;

    -- Si la imagen no existe, crear una nueva con fecha, licencia y correo_usuario
    IF v_id_imagen IS NULL THEN
        INSERT INTO Imagen (url, fecha, correo_usuario, id_licencia)
        VALUES (p_url_imagen, p_fecha, p_correo_usuario, p_id_licencia)
        RETURNING id_imagen INTO v_id_imagen;
    END IF;

    -- Verificar si la dirección ya existe
    SELECT id_direccion INTO v_id_direccion
    FROM Direccion
    WHERE calle = p_calle AND ciudad = p_ciudad AND estado = p_estado AND pais = p_pais;

    -- Si la dirección no existe, crear una nueva
    IF v_id_direccion IS NULL THEN
        INSERT INTO Direccion (calle, ciudad, estado, pais)
        VALUES (p_calle, p_ciudad, p_estado, p_pais)
        RETURNING id_direccion INTO v_id_direccion;
    END IF;

    SELECT id_taxon INTO v_id_taxon
    FROM Taxon
    WHERE LOWER(nombre) = LOWER(p_tipo_taxon);
 
    -- Insertar la observación
    INSERT INTO Observacion (nombre_comun, nombre_cliente, id_imagen, id_direccion, id_taxon)
    VALUES (p_nombre_comun, p_nombre_cientifico, v_id_imagen, v_id_direccion, v_id_taxon);
END;
$$;
